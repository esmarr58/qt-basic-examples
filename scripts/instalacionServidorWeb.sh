#!/bin/bash

# Verificar si el script se está ejecutando como root
if [ "$(id -u)" -ne 0 ]; then
    echo "Este script debe ejecutarse como root. Usa 'sudo'."
    exit 1
fi

# Actualizar el sistema e instalar paquetes necesarios
sudo apt update && sudo apt upgrade -y
sudo apt install nginx -y
sudo apt install mariadb-server -y
sudo apt install php-fpm php-mysql -y
sudo apt install phpmyadmin -y

# Detectar la versión de PHP instalada
PHP_VERSION=$(php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;")

# Ruta del archivo de configuración de NGINX por defecto
NGINX_DEFAULT="/etc/nginx/sites-available/default"

# Realizar copia de seguridad del archivo original
sudo cp $NGINX_DEFAULT ${NGINX_DEFAULT}.backup

# Reemplazar el archivo de configuración por defecto con el nuevo contenido
sudo tee $NGINX_DEFAULT > /dev/null <<EOL
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    include snippets/phpmyadmin.conf;

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    server_name _;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files \$uri \$uri/ =404;
    }

    # pass PHP scripts to FastCGI server
    #
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
    #
    #   # With php-fpm (or other unix sockets):
        fastcgi_pass unix:/run/php/php${PHP_VERSION}-fpm.sock;
    #   # With php-cgi (or other tcp sockets):
        #fastcgi_pass 127.0.0.1:9000;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #   deny all;
    #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#   listen 80;
#   listen [::]:80;
#
#   server_name example.com;
#
#   root /var/www/example.com;
#   index index.html;
#
#   location / {
#       try_files \$uri \$uri/ =404;
#   }
#}
EOL

# Crear el archivo de configuración para phpMyAdmin
sudo tee /etc/nginx/snippets/phpmyadmin.conf > /dev/null <<EOL
location /phpmyadmin {
    root /usr/share/;
    index index.php index.html index.htm;
    location ~ ^/phpmyadmin/(.+\.php)$ {
        try_files \$uri =404;
        root /usr/share/;
        fastcgi_pass unix:/run/php/php${PHP_VERSION}-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include /etc/nginx/fastcgi_params;
    }

    location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
        root /usr/share/;
    }
}
EOL

# Crear archivo info.php en /var/www/html para probar PHP
echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/info.php > /dev/null
sudo chown www-data:www-data /var/www/html/info.php

# Reiniciar NGINX para aplicar los cambios
sudo systemctl restart nginx

# Crear usuario administrador en MySQL/MariaDB o actualizar contraseña si ya existe
read -sp "Introduce la contraseña para el usuario 'admin': " PASSWORD1
echo
read -sp "Confirma la contraseña: " PASSWORD2
echo

# Verificar que las contraseñas coincidan
if [ "$PASSWORD1" != "$PASSWORD2" ]; then
    echo "Las contraseñas no coinciden. Intenta de nuevo."
    exit 1
fi

# Verificar si el usuario 'admin' ya existe
USER_EXISTS=$(sudo mysql -e "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = 'admin');" -s -N)

if [ "$USER_EXISTS" == "1" ]; then
    # Si el usuario existe, actualizar la contraseña
    sudo mysql -e "ALTER USER 'admin'@'localhost' IDENTIFIED BY '$PASSWORD1';"
    echo "Contraseña de 'admin' actualizada con éxito."
else
    # Si el usuario no existe, crearlo y otorgarle permisos
    sudo mysql -e "CREATE USER 'admin'@'localhost' IDENTIFIED BY '$PASSWORD1';"
    sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'admin'@'localhost' WITH GRANT OPTION;"
    echo "Usuario 'admin' creado con todos los privilegios en MySQL/MariaDB."
fi

# Aplicar los cambios de privilegios
sudo mysql -e "FLUSH PRIVILEGES;"

echo "Configuración completada: NGINX está configurado para PHP y phpMyAdmin."
